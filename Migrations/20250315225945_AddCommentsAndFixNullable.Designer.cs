// <auto-generated />
using FoodDeliveryBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDeliveryBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250315225945_AddCommentsAndFixNullable")]
    partial class AddCommentsAndFixNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("FoodDeliveryBackend.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Quick and tasty fast food.",
                            Name = "Aidla's Fastfood"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fresh, farm-to-table burgers.",
                            Name = "Farmburger"
                        });
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.DeliveryRegionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BaseBikeCost")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BaseCarCost")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BaseScooterCost")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HighWindsCost")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxLowTemperatureCost")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinLowTemperatureCost")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RainyWeatherCost")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SnowyWeatherCost")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeliveryRegionRules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseBikeCost = 3m,
                            BaseCarCost = 4m,
                            BaseScooterCost = 3.5m,
                            HighWindsCost = 0.5m,
                            MaxLowTemperatureCost = 1m,
                            MinLowTemperatureCost = 0.5m,
                            RainyWeatherCost = 0.5m,
                            RegionName = "Tallinn",
                            SnowyWeatherCost = 1m
                        },
                        new
                        {
                            Id = 2,
                            BaseBikeCost = 2.5m,
                            BaseCarCost = 3.5m,
                            BaseScooterCost = 3m,
                            HighWindsCost = 0.5m,
                            MaxLowTemperatureCost = 1m,
                            MinLowTemperatureCost = 0.5m,
                            RainyWeatherCost = 0.5m,
                            RegionName = "Tartu",
                            SnowyWeatherCost = 1m
                        },
                        new
                        {
                            Id = 3,
                            BaseBikeCost = 2m,
                            BaseCarCost = 3m,
                            BaseScooterCost = 2.5m,
                            HighWindsCost = 0.5m,
                            MaxLowTemperatureCost = 1m,
                            MinLowTemperatureCost = 0.5m,
                            RainyWeatherCost = 0.5m,
                            RegionName = "Pärnu",
                            SnowyWeatherCost = 1m
                        });
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeliveryRuleId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalDeliveryCost")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeliveryRuleId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.WeatherObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("AirTemperature")
                        .HasColumnType("REAL");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WeatherPhenomenon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherTimestampId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("REAL");

                    b.Property<string>("WmoCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WeatherTimestampId");

                    b.ToTable("WeatherObservations");
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.WeatherTimestamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ObservationTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeatherTimestamps");
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.Order", b =>
                {
                    b.HasOne("FoodDeliveryBackend.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryBackend.Models.DeliveryRegionRule", "DeliveryRule")
                        .WithMany()
                        .HasForeignKey("DeliveryRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DeliveryRule");
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.WeatherObservation", b =>
                {
                    b.HasOne("FoodDeliveryBackend.Models.WeatherTimestamp", "WeatherTimestamp")
                        .WithMany()
                        .HasForeignKey("WeatherTimestampId");

                    b.Navigation("WeatherTimestamp");
                });
#pragma warning restore 612, 618
        }
    }
}
