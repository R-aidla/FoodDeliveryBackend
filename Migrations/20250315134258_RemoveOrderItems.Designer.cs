// <auto-generated />
using System;
using FoodDeliveryBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDeliveryBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250315134258_RemoveOrderItems")]
    partial class RemoveOrderItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("FoodDeliveryBackend.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RegionFee")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityName")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Tallinn",
                            RegionFee = 3m
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Tartu",
                            RegionFee = 2.5m
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Pärnu",
                            RegionFee = 2m
                        });
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Quick and tasty fast food.",
                            Name = "Aidla's Fastfood"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fresh, farm-to-table burgers.",
                            Name = "Farmburger"
                        });
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationCityId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalDeliveryCost")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DestinationCityId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.WeatherObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("AirTemperature")
                        .HasColumnType("REAL");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WeatherPhenomenon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherTimestampId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("REAL");

                    b.Property<string>("WmoCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WeatherTimestampId");

                    b.ToTable("WeatherObservations");
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.WeatherTimestamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ObservationTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WeatherTimestamps");
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.Order", b =>
                {
                    b.HasOne("FoodDeliveryBackend.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryBackend.Models.City", "DestinationCity")
                        .WithMany()
                        .HasForeignKey("DestinationCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DestinationCity");
                });

            modelBuilder.Entity("FoodDeliveryBackend.Models.WeatherObservation", b =>
                {
                    b.HasOne("FoodDeliveryBackend.Models.WeatherTimestamp", "WeatherTimestamp")
                        .WithMany()
                        .HasForeignKey("WeatherTimestampId");

                    b.Navigation("WeatherTimestamp");
                });
#pragma warning restore 612, 618
        }
    }
}
