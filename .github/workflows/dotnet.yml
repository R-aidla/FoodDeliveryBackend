name: .NET Build & Test for Windows

on:
  push:
    paths-ignore:
      - '.config/**'
      - 'ENG_Documentation.pdf'
      - '.gitattributes'
      - '.gitignore'
      - 'README.MD'
      - 'LICENSE.txt'
    branches: [ main ]
  pull_request:
    paths-ignore:
      - '.config/**'
      - 'ENG_Documentation.pdf'
      - '.gitattributes'
      - '.gitignore'
      - 'README.MD'
      - 'LICENSE.txt'
    branches: [ main ]

jobs:
  build:
    name: Testing build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Use the version your app targets

    - name: Restore dependencies
      run: dotnet restore

    - name: Build app
      run: dotnet build --no-restore

    - name: Startup the application and check if is resposive
      shell: pwsh
      env:
        ServerSettings__HostAddress: "localhost"
        ServerSettings__Port: "5000"
        ServerSettings__Secure: false
      run: ./tests/win-test.ps1

    - name: Check if server is running by sending GET request
      shell: pwsh
      run: |
        $response = Invoke-WebRequest -Uri http://localhost:5000/api/companies -UseBasicParsing
        Write-Host "GET Response: [$($response.StatusCode)] $($response.Content)"
        if ($response.StatusCode -ne 200) { exit 1 }

    - name: Send GET request to auth-protected endpoint WITHOUT key
      shell: pwsh
      run: |
        try {
          $response = Invoke-WebRequest -Uri http://localhost:5000/api/weather -UseBasicParsing
        } catch {
          $response = $_.Exception.Response
        }
        $statusCode = $response.StatusCode.Value__
        Write-Host "Secure GET without key Response: [$statusCode]"
        if ($statusCode -ne 401) { exit 1 }

    - name: Send GET request to auth-protected endpoint with key
      shell: pwsh
      run: |
        $adminKey = 'your_secret_key' # PLACEHOLDER DEFAULT KEY
        $maxRetries = 3
        $delay = 6
        $success = $false
        $headers = @{ "X-API-Key" = "$adminKey" }
        for ($i = 0; $i -lt $maxRetries; $i++) {
          try {
            $response = Invoke-WebRequest -Uri http://localhost:5000/api/weather/latest -Headers $headers -UseBasicParsing
            Write-Host "Attempt [$($i + 1)]: Status Code [$($response.StatusCode)]"
            Write-Host ""
            if ($response.StatusCode -eq 200 -and $response.Content -and -not $response.Content.Contains("No weather data available")) {
              Write-Host "Secure GET with key Response: $($response.Content)"
              $success = $true
              break
            }
          } catch {
            Write-Host "Attempt [$($i + 1)] failed: $_.Exception.Message."
          }
          Start-Sleep -Seconds $delay
        }
        if (-not $success) {
          Write-Error "Failed to get valid weather data after $maxRetries attempts. Check weather parsing or the program itself."
          exit 1
        }

    - name: Kill server process if still running
      if: always()
      shell: pwsh
      run: |
        $serverPid = Get-Content server-process.pid
        Stop-Process -Id $serverPid -Force
