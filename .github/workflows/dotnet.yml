name: .NET Build & Test for Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Testing build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Use the version your app targets

    - name: Restore dependencies
      run: dotnet restore

    - name: Build app
      run: dotnet build --no-restore

    - name: Startup the application and check if is resposive
      shell: pwsh
      env:
        ServerSettings__HostAddress: "localhost"
        ServerSettings__Port: "5000"
        ServerSettings__Secure: false
      run: ./tests/win-test.ps1

    - name: Check if server is running by sending GET request
      shell: pwsh
      run: |
        $response = Invoke-WebRequest -Uri http://localhost:5000/api/companies -UseBasicParsing
        Write-Host "GET Response: [$($response.StatusCode)] $($response.Content)"
        if ($response.StatusCode -ne 200) { exit 1 }

    - name: Send GET request to auth-protected endpoint WITHOUT key
      shell: pwsh
      run: |
        try {
          $response = Invoke-WebRequest -Uri http://localhost:5000/api/weather -UseBasicParsing
        } catch {
          $response = $_.Exception.Response
        }
        $statusCode = $response.StatusCode.Value__
        Write-Host "Secure GET without key Response: [$statusCode]"
        if ($statusCode -ne 401) { exit 1 }

    - name: Send GET request to auth-protected endpoint with key
      shell: pwsh
      run: |
        $adminKey = 'your_secret_key' # THIS IS A PLACEHOLDER, DEFAULT KEY! NOT AN ACTUAL SECERT KEY.
        $headers = @{ "X-API-Key" = "$adminKey" }
        $response = Invoke-WebRequest -Uri http://localhost:5000/api/weather -Headers $headers -UseBasicParsing
        Write-Host "Secure GET with key Response: [$($response.StatusCode)] $($response.Content)"
        if ($response.StatusCode -ne 200) { exit 1 }

    - name: Kill server process if still running
      if: always()
      shell: pwsh
      run: |
        $pid = Get-Content server-process.pid
        Stop-Process -Id $pid -Force
